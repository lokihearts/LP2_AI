class Graph:
    def __init__(self):
        self.adj_list = {}

    def add_edge(self, u, v, weight):
        if u not in self.adj_list:
            self.adj_list[u] = []
        if v not in self.adj_list:
            self.adj_list[v] = []
        self.adj_list[u].append((v, weight))
        self.adj_list[v].append((u, weight))

    def get_neighbors(self, u):
        return self.adj_list.get(u, [])

def prim_mst(graph, start):
    mst = []
    visited = set()
    pq = [(0, start)]  # Priority queue (weight, vertex)

    while pq:
        weight, node = pq.pop(0)

        if node not in visited:
            mst.append((weight, node))
            visited.add(node)

            for neighbor, edge_weight in graph.get_neighbors(node):
                if neighbor not in visited:
                    pq.append((edge_weight, neighbor))

            pq.sort()

    return mst[1:]  # Exclude starting node

def print_mst(mst):
    print("Minimum Spanning Tree:")
    total_weight = 0
    for weight, node in mst:
        print("Edge:", node, "--", weight)
        total_weight += weight
    print("Total Weight of MST:", total_weight)

def main():
    graph = Graph()

    while True:
        print("\nMenu:")
        print("1. Add Edge")
        print("2. Find Minimum Spanning Tree (MST)")
        print("3. Exit")

        choice = input("Enter your choice: ")

        if choice == "1":
            u, v, weight = map(int, input("Enter source vertex, destination vertex, and weight of the edge (space-separated): ").split())
            graph.add_edge(u, v, weight)
        elif choice == "2":
            start = int(input("Enter starting vertex for MST: "))
            mst = prim_mst(graph, start)
            print_mst(mst)
        elif choice == "3":
            print("Exiting...")
            break
        else:
            print("Invalid choice. Please enter a valid option.")

if __name__ == "__main__":
    main()
