import heapq

class Node:
    def __init__(self, state, parent=None, g=0, h=0):
        self.state = state
        self.parent = parent
        self.g = g
        self.h = h

    def __lt__(self, other):
        return (self.g + self.h) < (other.g + other.h)

def astar(start_state, goal_state, heuristic, successors):
    open_set = []
    closed_set = set()

    start_node = Node(start_state, None, 0, heuristic(start_state, goal_state))
    heapq.heappush(open_set, start_node)

    while open_set:
        current_node = heapq.heappop(open_set)

        if current_node.state == goal_state:
            path = []
            while current_node:
                path.append(current_node.state)
                current_node = current_node.parent
            return path[::-1]

        closed_set.add(current_node.state)

        for successor, cost in successors(current_node.state):
            if successor in closed_set:
                continue

            g = current_node.g + cost
            h = heuristic(successor, goal_state)
            new_node = Node(successor, current_node, g, h)

            if not any(node.state == successor and (node.g + node.h) < (new_node.g + new_node.h) for node in open_set):
                heapq.heappush(open_set, new_node)

    return None

# Example usage:
def heuristic(state, goal_state):
    # Simple heuristic: Manhattan distance between current state and goal state
    return abs(state[0] - goal_state[0]) + abs(state[1] - goal_state[1])

def successors(state):
    # Define successors function here
    successors = []
    # Example: moving up, down, left, right
    for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
        new_state = (state[0] + dx, state[1] + dy)
        if 0 <= new_state[0] < 10 and 0 <= new_state[1] < 10:  # Example bounds checking
            successors.append((new_state, 1))  # Assuming uniform cost for all actions
    return successors

start_state = (0, 0)
goal_state = (9, 9)
path = astar(start_state, goal_state, heuristic, successors)
print("Path found:", path)

