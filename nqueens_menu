def is_safe(board, row, col):
    # Check if there is a queen in the same column
    for i in range(row):
        if board[i][col] == 1:
            return False
    
    # Check upper diagonal on left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    
    # Check upper diagonal on right side
    for i, j in zip(range(row, -1, -1), range(col, len(board))):
        if board[i][j] == 1:
            return False
    
    return True

def solve_n_queens(board, row):
    n = len(board)
    if row >= n:
        return True
    
    for col in range(n):
        if is_safe(board, row, col):
            board[row][col] = 1
            if solve_n_queens(board, row + 1):
                return True
            board[row][col] = 0
    
    return False

def print_solution(board):
    for row in board:
        print(" ".join("Q" if cell == 1 else "-" for cell in row))

def main():
    while True:
        print("N-Queens Problem Solver")
        print("1. Solve N-Queens")
        print("2. Exit")
        choice = input("Enter your choice: ")
        
        if choice == "1":
            try:
                n = int(input("Enter the number of queens (N): "))
                if n <= 0:
                    print("N must be a positive integer.")
                    continue
            except ValueError:
                print("Invalid input. Please enter a valid integer.")
                continue
            
            board = [[0] * n for _ in range(n)]
            if solve_n_queens(board, 0):
                print("Solution found:")
                print_solution(board)
            else:
                print("No solution exists.")
        elif choice == "2":
            print("Exiting...")
            break
        else:
            print("Invalid choice. Please enter 1 or 2.")

if __name__ == "__main__":
    main()
